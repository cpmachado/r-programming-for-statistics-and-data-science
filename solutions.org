#+title: Solutions to R Programming for Statistics and Data Science
#+startup: overview indent
#+columns: %ITEM %CHAPTER

* Exercise 1: Creating an object in R
:PROPERTIES:
:CHAPTER:  8
:END:
Use pemdas and it will work, hence the parantheses in the answer.

#+begin_src R :colnames yes :tangle exercise01.r
  # See LICENSE for details.
  x <- 10:20
  y <- 2 + x
  z <- 3 * y
  answer <- (z - 6) / 3
  data.frame(x, y, z, answer)
#+end_src

#+RESULTS:
|  x |  y |  z | answer |
|----+----+----+--------|
| 10 | 12 | 36 |     10 |
| 11 | 13 | 39 |     11 |
| 12 | 14 | 42 |     12 |
| 13 | 15 | 45 |     13 |
| 14 | 16 | 48 |     14 |
| 15 | 17 | 51 |     15 |
| 16 | 18 | 54 |     16 |
| 17 | 19 | 57 |     17 |
| 18 | 20 | 60 |     18 |
| 19 | 21 | 63 |     19 |
| 20 | 22 | 66 |     20 |

* Exercise 2: Data types in R
:PROPERTIES:
:CHAPTER:  11
:END:
Some kind of coercion is applied to transform double to character.

#+begin_src R :tangle exercise02.r
  # See LICENSE for details.
  employee_names <- c(
    "Belinda Johnes",
    "Maria Delar",
    "Math Smith",
    "Matt Williams",
    "Robert Mathews",
    "Julia Walters",
    "Andrea Cheng",
    "July Horitz",
    "Danielle Muller",
    "Esteban Lugo"
  )

  # -> "character"
  typeof(employee_names)

  salary <- c(
    3000,
    NA,
    NA,
    NA,
    NA,
    4000,
    3000,
    5000,
    1000,
    5000
  )

  # -> "double"
  typeof(salary)

  employees <- c(employee_names, salary)

  # -> "character"
  typeof(employees)
#+end_src

#+RESULTS:
: character

* Exercise 3: Coercion rules in R
:PROPERTIES:
:CHAPTER:  13
:END:

I expected the conversion to "TRUE" and "FALSE", as well as the
numeric on logical, as it appears that R strives towards the more
reasonable representation.

There is no straight logical translation from strings to numbers, or
from numbers and strings to logical, thus a hierarchy rises. Or so it
seems.

#+begin_src R :tangle exercise03.r
  # See LICENSE for details.
  employee_names <- c(
    "Belinda Johnes",
    "Maria Delar",
    "Math Smith",
    "Matt Williams",
    "Robert Mathews",
    "Julia Walters",
    "Andrea Cheng",
    "July Horitz",
    "Danielle Muller",
    "Esteban Lugo"
  )

  salary <- c(
    3000,
    NA,
    NA,
    NA,
    NA,
    4000,
    3000,
    5000,
    1000,
    5000
  )

  # my linter says using single letter is bad practice
  yearly_bonus <- c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)

  employees <- c(employee_names, salary, yearly_bonus)

  # -> "character"
  typeof(employees)

  # maintain consistency
  coerce.check <- c(salary, yearly_bonus)

  # -> "double"
  typeof(coerce.check)
#+end_src

#+RESULTS:
: double

* Exercise 4: Using functions in R
:PROPERTIES:
:CHAPTER:  15
:END:
#+begin_src R :colnames yes :tangle exercise04.r
  # See LICENSE for details.
  years_of_experience <- c(8, 10, 10, 1, 10, 10, 8, 12, 1, 12)

  # Using data.frame to print table in org mode
  data.frame(
    sum = sum(years_of_experience),
    avg = mean(years_of_experience),
    median = median(years_of_experience),
    length = length(years_of_experience),
    sd = sd(years_of_experience),
    rounded_sd = round(sd(years_of_experience))
  )

  # This is asked
  #print(round(sd(years_of_experience)))
#+end_src

#+RESULTS:
| sum | avg | median | length |               sd | rounded_sd |
|-----+-----+--------+--------+------------------+------------|
|  82 | 8.2 |     10 |     10 | 4.02216083439956 |          4 |

* Exercise 5: The arguments of a function
:PROPERTIES:
:CHAPTER:  17
:END:

The na.rm parameter in median ignores NA values, which if passed become the result.

#+begin_src R :colnames yes :tangle exercise05.r
  # See LICENSE for details.

  # args will only tell you the name of arguments
  args(sample)
  args(median)

  # You should use help with either approach, as it gives you the proper
  # documentation, for example na.rm ignores NA values in regards to
  # salary in the computation.
  ?sample
  ?median


  years_of_experience <- c(8, 10, 10, 1, 10, 10, 8, 12, 1, 12)
  salary <- c(
    3000,
    NA,
    NA,
    NA,
    NA,
    4000,
    3000,
    5000,
    1000,
    5000
  )

  data.frame(
    years_of_experience_median_rmt = median(na.rm = TRUE, years_of_experience),
    years_of_experience_median = median(years_of_experience),
    salary_median_rmt = median(na.rm = TRUE, salary),
    salary_median = median(salary)
  )
#+end_src

#+RESULTS:
| years_of_experience_median_rmt | years_of_experience_median | salary_median_rmt | salary_median |
|--------------------------------+----------------------------+-------------------+---------------|
|                             10 |                         10 |              3500 |               |

* Exercise 6: Building a function in R
:PROPERTIES:
:CHAPTER:  19
:END:
#+begin_src R :tangle exercise06.r
  # See LICENSE for details.
  coin <- c("heads", "tails")
  prob <- c(0.3, 0.7)
  size <- 100

  flip <- function(coin, size, prob) {
    sample(coin, size = size, prob = prob, replace = TRUE)
  }

  print(flip(coin, size, prob))
#+end_src
